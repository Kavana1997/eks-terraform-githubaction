name: "Terraform EKS Deployment"

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
  workflow_dispatch:

env:
  AWS_REGION: "us-west-2"
  TERRAFORM_DIR: "./terraform"
  STATE_BUCKET: "your-eks-terraform-state-bucket"
  LOCK_TABLE: "your-eks-terraform-lock-table"

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"
      
      - name: Ensure State Backend Infrastructure
        run: |
          # Check if S3 bucket exists, create if not
          if ! aws s3api head-bucket --bucket ${{ env.STATE_BUCKET }} 2>/dev/null; then
            echo "Creating Terraform state bucket..."
            aws s3api create-bucket \
              --bucket ${{ env.STATE_BUCKET }} \
              --region ${{ env.AWS_REGION }} \
              --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }}
            
            # Enable versioning
            aws s3api put-bucket-versioning \
              --bucket ${{ env.STATE_BUCKET }} \
              --versioning-configuration Status=Enabled
            
            # Enable encryption
            aws s3api put-bucket-encryption \
              --bucket ${{ env.STATE_BUCKET }} \
              --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          else
            echo "Terraform state bucket already exists."
          fi
          
          # Check if DynamoDB table exists, create if not
          if ! aws dynamodb describe-table --table-name ${{ env.LOCK_TABLE }} >/dev/null 2>&1; then
            echo "Creating Terraform lock table..."
            aws dynamodb create-table \
              --table-name ${{ env.LOCK_TABLE }} \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
          else
            echo "Terraform lock table already exists."
          fi
      
      - name: Terraform Init
        id: init
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          terraform init
      
      - name: Check Existing Resources
        id: check_resources
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          
          # List resources in state
          echo "Current state resources:"
          terraform state list || echo "No state found or empty state"
          
          # Check for existing VPCs
          echo "Existing VPCs in AWS account:"
          aws ec2 describe-vpcs --query 'Vpcs[].{VpcId:VpcId,CIDR:CidrBlock,Name:Tags[?Key==`Name`].Value|[0]}' --output table
          
          # Check for existing EKS clusters
          echo "Existing EKS clusters:"
          aws eks list-clusters || echo "No EKS clusters found"
      
      - name: Terraform Validate
        id: validate
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          terraform validate -no-color
      
      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          terraform plan -no-color -out=tfplan
        continue-on-error: true
      
      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
      
      - name: Terraform Apply
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          terraform apply -auto-approve tfplan
      
      - name: Terraform Output
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          echo "EKS Cluster Details:"
          terraform output
      
      - name: Upload Terraform State Summary
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: terraform-state-summary
          path: |
            ${{ env.TERRAFORM_DIR }}/.terraform/terraform.tfstate
            ${{ env.TERRAFORM_DIR }}/tfplan
